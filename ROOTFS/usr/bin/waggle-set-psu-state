#!/usr/bin/env python3
import argparse
import configparser
import sys
import time
from pathlib import Path


def fatal(*args, **kwargs):
    print(*args, **kwargs, flush=True)
    sys.exit(1)


def must_read_config_file(filename):
    config = configparser.ConfigParser()

    if not config.read(filename):
        fatal(f"could not read config file {filename}")

    try:
        section = config["psu-control"]
    except KeyError:
        fatal(f"config error: must have section [psu-control]")

    def must_get_int(name):
        try:
            return int(section[name])
        except KeyError:
            fatal(f"config error: must have value for {name}")
        except ValueError:
            fatal(f"config error: invalid value {section[name]} for {name}")

    return {
        "gpio-clk": must_get_int("gpio-clk"),
        "gpio-ep": must_get_int("gpio-ep"),
        "gpio-ph": must_get_int("gpio-ph"),
    }


INPUT = "in"
OUTPUT = "out"

LOW = "0"
HIGH = "1"


def ensure_gpio_exported(num: int):
    if not Path(f"/sys/class/gpio/gpio{num}").exists():
        Path("/sys/class/gpio/export").write_text(str(num))


def set_gpio_direction(num: int, dir: str):
    Path(f"/sys/class/gpio/gpio{num}/direction").write_text(dir)


def set_gpio_value(num: int, value: str):
    Path(f"/sys/class/gpio/gpio{num}/value").write_text(value)


def get_gpio_value(num: int) -> str:
    return Path(f"/sys/class/gpio/gpio{num}/value").read_text().strip()


def main():
    choices = ["on", "off"]
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-C", "--config", default="/etc/waggle/config.ini", help="config file to use"
    )
    parser.add_argument("--dry-run", action="store_true", help="config file to use")
    parser.add_argument("ep_state", choices=choices, help="edge processor power state")
    parser.add_argument("ph_state", choices=choices, help="peripherals power state")
    args = parser.parse_args()

    config = must_read_config_file(args.config)
    gpio_clk = config["gpio-clk"]
    gpio_ep = config["gpio-ep"]
    gpio_ph = config["gpio-ph"]

    if args.dry_run:
        print(f"setting power state to ep={args.ep_state} ph={args.ph_state}")
        print(f"using config {config}")
        return

    # ensure gpios are setup
    ensure_gpio_exported(gpio_clk)
    ensure_gpio_exported(gpio_ep)
    ensure_gpio_exported(gpio_ph)
    time.sleep(0.001)

    # set desired states then clock the latch
    ep_state = "on" if get_gpio_value(gpio_ep) == HIGH else "off"    
    if ep_state == args.ep_state:
        print(f"ep state unmodified")
    else:
        set_gpio_direction(gpio_clk, OUTPUT)
        set_gpio_direction(gpio_ep, OUTPUT)
        time.sleep(0.001)
        set_gpio_value(gpio_ep, HIGH if args.ep_state == "on" else LOW)

    ph_state = "on" if get_gpio_value(gpio_ph) == HIGH else "off"
    if ph_state == args.ph_state:
        print(f"ph state unmodified")
    else:
        set_gpio_direction(gpio_clk, OUTPUT)
        set_gpio_direction(gpio_ph, OUTPUT)
        time.sleep(0.001)
        set_gpio_value(gpio_ph, HIGH if args.ph_state == "on" else LOW)
    time.sleep(0.01)
    set_gpio_value(gpio_clk, LOW)
    time.sleep(0.01)
    set_gpio_value(gpio_clk, HIGH)
    time.sleep(0.01)


if __name__ == "__main__":
    main()